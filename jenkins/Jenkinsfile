pipeline {
    agent any

    environment {
        S3_BUCKET = 'my-s3-bucket-for-jenkins-pipeline-setup'
        S3_KEY = 'my-app.zip'
        ENVIRONMENT_NAME = 'POC-Jenkins-env'
        APPLICATION_NAME = 'POC-Jenkins'
        AWS_REGION = 'us-east-1'
        SECRET_NAME = 'secret-jenkins-access'
        VERSION_LABEL = "app-version-${BUILD_NUMBER}"
        
        // Use Jenkins Credentials Plugin to securely retrieve these passwords
        WEBDEPLOYADMIN_PASSWORD = credentials('WDeployAdmin')
    }

    stages {
        stage('Retrieve AWS Credentials from Secrets Manager') {
            steps {
                script {
                    def secretValue = sh(script: "aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query 'SecretString' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def credentials = jsonSlurper.parseText(secretValue)
                    env.AWS_ACCESS_KEY_ID = credentials.keySet().iterator().next()
                    env.AWS_SECRET_ACCESS_KEY = credentials[env.AWS_ACCESS_KEY_ID]
                }
            }
        }

        stage('Install Ansible Collections') {
            steps {
                script {
                    sh 'ansible-galaxy collection install ansible.windows --force'
                }
            }
        }

        stage('Configure IIS and WebDeploy') {
            steps {
                script {
                    ansiblePlaybook(
                        playbook: 'ansible/playbook.yml',
                        inventory: 'ansible/inventory.ini',
                        extraVars: [
                            application_name: "${APPLICATION_NAME}",
                            environment_name: "${ENVIRONMENT_NAME}",
                            region: "${AWS_REGION}",
                            WEBDEPLOYADMIN_PASSWORD: "${WEBDEPLOYADMIN_PASSWORD}"
                        ]
                    )
                }
            }
        }

        stage('Upload to S3') {
            steps {
                sh "aws s3 cp application.zip s3://${S3_BUCKET}/${S3_KEY} --region ${AWS_REGION}"
            }
        }

        stage('Create Application Version') {
            steps {
                sh """
                    aws elasticbeanstalk create-application-version \
                    --application-name ${APPLICATION_NAME} \
                    --version-label ${VERSION_LABEL} \
                    --source-bundle S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} \
                    --region ${AWS_REGION}
                """
            }
        }
        stage('Wait for Environment Readiness') {
            steps {
                script {
                    def isReady = false
                    while (!isReady) {
                        def result = sh(script: """
                            aws elasticbeanstalk describe-environments --application-name ${APPLICATION_NAME} \
                            --environment-names ${ENVIRONMENT_NAME} --query 'Environments[0].Status' --output text --region ${AWS_REGION}
                        """, returnStdout: true).trim()
                        if (result == 'Ready') {
                            isReady = true
                        } else {
                            echo "Waiting for environment to be ready..."
                            sleep(time: 60, unit: 'SECONDS') // Wait 60 seconds before checking again
                        }
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                sh """
                    aws elasticbeanstalk update-environment \
                      --application-name ${APPLICATION_NAME} \
                      --environment-name ${ENVIRONMENT_NAME} \
                      --version-label ${VERSION_LABEL} \
                      --region ${AWS_REGION}
                """
            }
        }
    }

    post {
        success {
            echo 'Deployment process completed successfully.'
        }
        failure {
            echo 'Deployment process failed. Please check the logs for more details.'
        }
    }
}
