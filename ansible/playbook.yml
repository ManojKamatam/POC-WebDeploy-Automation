---
- name: Configure Windows EC2 Instances in Elastic Beanstalk
  hosts: windows
  tasks:
    - name: Ensure C:\temp directory exists
      win_file:
        path: 'C:\temp'
        state: directory

    - name: Download WebDeploy Installer
      win_get_url:
        url: "https://my-s3-bucket-for-jenkins-pipeline-setup.s3.amazonaws.com/webdeploy_amd64_en-US.msi"
        dest: "C:\\temp\\WebDeploy_x64.msi"

    - name: Install WebDeploy
      win_package:
        path: 'C:\\temp\\WebDeploy_x64.msi'
        state: present
        arguments: '/quiet'

    - name: Create WebDeploy Admin User with password never expiring
      win_user:
        name: "webdeployadmin"
        password: "{{ lookup('env', 'WEBDEPLOYADMIN_PASSWORD') }}"
        state: present
        password_never_expires: yes

    - name: Add WebDeploy Admin to Administrators Group
      win_group_membership:
        name: Administrators
        members: webdeployadmin
        state: present

    - name: Add WebDeployConfigWriter User with password never expiring
      win_user:
        name: "WDeployConfigWriter"
        password: "{{ lookup('env', 'WEBDEPLOYADMIN_PASSWORD') }}"
        state: present
        password_never_expires: yes

    - name: Add WebDeployConfigWriter to Administrators Group
      win_group_membership:
        name: Administrators
        members: WDeployConfigWriter
        state: present

    - name: Add login.aspx to Default Documents at Default Web Site level
      win_shell: |
        Import-Module WebAdministration
        $defaultDocsPath = "MACHINE/WEBROOT/APPHOST/Default Web Site"
        $defaultDocs = Get-WebConfigurationProperty -pspath $defaultDocsPath -filter "system.webServer/defaultDocument/files" -name "."
    
        # Check if 'login.aspx' already exists
        if ($defaultDocs.collection.value -notcontains 'login.aspx') {
            Add-WebConfigurationProperty -pspath $defaultDocsPath -filter "system.webServer/defaultDocument/files" -name "." -value @{value='login.aspx'}
            Write-Host "'login.aspx' added to Default Documents for Default Web Site"
        } else {
            Write-Host "'login.aspx' already exists in Default Documents for Default Web Site"
        }
      args:
        executable: "powershell"

    - name: Start DefaultAppPool if not running
      win_shell: |
        Import-Module WebAdministration
        $appPool = Get-WebAppPoolState -Name 'DefaultAppPool'
        if ($appPool -ne 'Started') {
          Start-WebAppPool -Name 'DefaultAppPool'
          Write-Host "DefaultAppPool started."
        } else {
          Write-Host "DefaultAppPool is already running."
        }

    - name: Ensure Default Web Site is running
      win_shell: |
        Import-Module WebAdministration
        $site = Get-Website -Name 'Default Web Site'
        if ($site.state -ne 'Started') {
          Start-Website -Name 'Default Web Site'
          Write-Host "Default Web Site started."
        } else {
          Write-Host "Default Web Site is already running."
        }

    - name: Stop IIS Management Service before identity change
      win_service:
        name: WMSVC
        state: stopped

    - name: Create a self-signed SSL certificate
      win_shell: |
        Import-Module WebAdministration
        New-SelfSignedCertificate -DnsName "office-deployment" -CertStoreLocation "cert:\LocalMachine\My"
    - name: Wait for SSL certificate to be created
      pause:
        seconds: 10

    - name: Enable Remote Connections with SSL
      win_shell: |
        $cert = Get-ChildItem Cert:\\LocalMachine\\My | Where-Object { $_.DnsName -eq 'office-deployment' }
        if ($cert) {
          Write-Host "Certificate found: $($cert.Thumbprint)"
          Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/management" -name "enableRemoteManagement" -value $true
          Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/management" -name "SslCertificateHash" -value $cert.Thumbprint
          Restart-Service WMSVC
          Write-Host "Remote connection enabled and SSL certificate applied successfully."
        } else {
          Write-Host "Certificate not found! Retrying after a short delay."
          Start-Sleep -Seconds 5
          $cert = Get-ChildItem Cert:\\LocalMachine\\My | Where-Object { $_.DnsName -eq 'office-deployment' }
          if ($cert) {
            Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/management" -name "SslCertificateHash" -value $cert.Thumbprint
            Restart-Service WMSVC
            Write-Host "Remote connection enabled and SSL certificate applied after retry."
          } else {
            Write-Host "Certificate still not found. Exiting with error."
            exit 1
          }
        }
      
      register: remote_enable_result
      retries: 3
      delay: 5
      until: remote_enable_result.rc == 0

    - name: Start IIS Management Service after identity change
      win_service:
        name: WMSVC
        state: started
