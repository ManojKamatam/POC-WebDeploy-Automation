---
- name: Configure Windows EC2 Instances in Elastic Beanstalk
  hosts: windows
  tasks:
    - name: Ensure C:\temp directory exists
      win_file:
        path: 'C:\temp'
        state: directory

    - name: Download WebDeploy Installer
      win_get_url:
        url: "https://my-s3-bucket-for-jenkins-pipeline-setup.s3.amazonaws.com/webdeploy_amd64_en-US.msi"
        dest: "C:\\temp\\WebDeploy_x64.msi"

    - name: Install WebDeploy
      win_package:
        path: 'C:\\temp\\WebDeploy_x64.msi'
        state: present
        arguments: '/quiet'

    - name: Create WebDeploy Admin User
      win_user:
        name: "webdeployadmin"
        password: "{{ lookup('env', 'WEBDEPLOYADMIN_PASSWORD') }}"
        state: present

    - name: Add WebDeploy Admin to Administrators Group
      win_group_membership:
        name: Administrators
        members: webdeployadmin
        state: present

    - name: Add WebDeployConfigWriter to Group
      win_user:
        name: "WDeployConfigWriter"
        password: "{{ lookup('env', 'WEBDEPLOYADMIN_PASSWORD') }}"
        state: present

    - name: Add WebDeployConfigWriter to Administrators Group
      win_group_membership:
        name: Administrators
        members: WDeployConfigWriter
        state: present

    - name: Ensure login.aspx is added to Default Documents
      win_shell: |
        Import-Module WebAdministration
        $site = Get-Website -Name 'Default Web Site'
        if ($site) {
          $defaultDocs = Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/defaultDocument/files" -name "value" -location 'Default Web Site'
          if ($defaultDocs -notcontains 'login.aspx') {
            Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/defaultDocument/files" -name "." -value @{value='login.aspx'} -location 'Default Web Site'
            Write-Host "Added login.aspx to default documents."
          } else {
            Write-Host "login.aspx already exists in the default documents."
          }
        }

    - name: Start Default Web Site if stopped
      win_service:
        name: 'W3SVC'
        start_mode: auto
        state: started

    - name: Ensure DefaultAppPool is running and restart if necessary
      win_shell: |
        Import-Module WebAdministration
        $appPool = Get-WebAppPoolState -Name 'DefaultAppPool'
        if ($appPool -ne 'Started') {
          Start-WebAppPool -Name 'DefaultAppPool'
          Write-Host "DefaultAppPool started."
        } else {
          Write-Host "DefaultAppPool is already running."
        }

    - name: Stop IIS Management Service before identity change
      win_service:
        name: WMSVC
        state: stopped

    - name: Create a self-signed SSL certificate
      win_shell: |
        Import-Module WebAdministration
        New-SelfSignedCertificate -DnsName "office-deployment" -CertStoreLocation "cert:\LocalMachine\My" | Out-Null
        Write-Host "Self-signed certificate 'office-deployment' created."

    - name: Enable Remote Connections and set SSL certificate in IIS Management Service
      win_shell: |
        Import-Module WebAdministration
        $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.FriendlyName -eq 'office-deployment' }
        if ($cert) {
          Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/sites/siteDefaults/ftpServer/security/authentication/anonymousAuthentication" -name "identity" -value "IIS_IUSRS"
          Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/management" -name "enableRemoteManagement" -value $true
          Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/management" -name "SslCertificateHash" -value $cert.Thumbprint
          Write-Host "Remote connections enabled and SSL certificate bound to IIS Management Service."
        } else {
          Write-Host "SSL certificate not found!"
        }

    - name: Start IIS Management Service after changes
      win_service:
        name: WMSVC
        state: started

    - name: Ensure DefaultAppPool is still running after all changes
      win_shell: |
        Import-Module WebAdministration
        $appPool = Get-WebAppPoolState -Name 'DefaultAppPool'
        if ($appPool -ne 'Started') {
          Start-WebAppPool -Name 'DefaultAppPool'
          Write-Host "DefaultAppPool started after all changes."
        } else {
          Write-Host "DefaultAppPool is still running."
        }

    - name: Ensure Default Web Site is still running after all changes
      win_service:
        name: 'W3SVC'
        state: started
