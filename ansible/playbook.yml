---
- name: Configure Windows EC2 Instances in Elastic Beanstalk
  hosts: windows
  vars:
    ansible_winrm_operation_timeout_sec: 1200  # Increased WinRM operation timeout to 20 minutes
    ansible_winrm_read_timeout_sec: 1800       # Increased read timeout to 30 minutes
  tasks:
    - name: Ensure C:\temp directory exists
      win_file:
        path: 'C:\temp'
        state: directory

    - name: Download WebDeploy Installer
      win_get_url:
        url: "https://my-s3-bucket-for-jenkins-pipeline-setup.s3.amazonaws.com/webdeploy_amd64_en-US.msi"
        dest: "C:\\temp\\WebDeploy_x64.msi"
      retries: 3
      delay: 60

    - name: Install WebDeploy
      win_package:
        path: 'C:\\temp\\WebDeploy_x64.msi'
        state: present
        arguments: '/quiet'
      retries: 3
      delay: 60

    - name: Create WebDeploy Admin User
      win_user:
        name: "webdeployadmin"
        password: "{{ lookup('env', 'WEBDEPLOYADMIN_PASSWORD') }}"
        state: present

    - name: Add WebDeploy Admin to Administrators Group
      win_group_membership:
        name: Administrators
        members: webdeployadmin
        state: present

    - name: Ensure login.aspx is added to Default Documents
      win_shell: |
        Import-Module WebAdministration
        $site = Get-Website -Name 'Default Web Site'
        if ($site) {
          $defaultDocs = Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/defaultDocument/files" -name "value" -location 'Default Web Site'
          if ($defaultDocs -notcontains 'login.aspx') {
            Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/defaultDocument/files" -name "." -value @{value='login.aspx'} -location 'Default Web Site'
            Write-Host "Added login.aspx to default documents."
          } else {
            Write-Host "login.aspx already exists in the default documents."
          }
        }
      retries: 3
      delay: 60

    - name: Ensure Default Web Site bindings are reset to HTTP
      win_shell: |
        Import-Module WebAdministration
        $bindings = Get-WebBinding -Name 'Default Web Site' | Where-Object { $_.bindingInformation -like '*:80:' }
        if ($bindings -eq $null) {
          New-WebBinding -Name 'Default Web Site' -Protocol http -Port 80
        } else {
          Write-Host "HTTP binding on port 80 already exists."
        }
      retries: 3
      delay: 60

    - name: Restart IIS AppPool 'DefaultAppPool'
      win_shell: |
        Import-Module WebAdministration
        Stop-WebAppPool -Name 'DefaultAppPool'
        Start-WebAppPool -Name 'DefaultAppPool'
        if ((Get-WebAppPoolState -Name 'DefaultAppPool') -eq 'Stopped') {
          Write-Host "App Pool could not be started. Check the configuration."
        }
      retries: 3
      delay: 60

    - name: Stop IIS Management Service before identity change
      win_service:
        name: WMSVC
        state: stopped

    - name: Change IIS Management Service identity to Windows/IIS Management credentials
      win_shell: |
        Import-Module WebAdministration
        Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/sites/siteDefaults/ftpServer/security/authentication/anonymousAuthentication" -name "identity" -value "IIS_IUSRS"
      retries: 3
      delay: 60

    - name: Start IIS Management Service after identity change
      win_service:
        name: WMSVC
        state: started

    - name: Restart IIS to ensure all services are running
      win_service:
        name: W3SVC
        state: restarted
      retries: 3
      delay: 60
