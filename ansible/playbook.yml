---
- name: Configure Windows EC2 Instances in Elastic Beanstalk
  hosts: windows
  tasks:
    - name: Ensure C:\temp directory exists
      win_file:
        path: 'C:\temp'
        state: directory

    - name: Download WebDeploy Installer
      win_get_url:
        url: "https://my-s3-bucket-for-jenkins-pipeline-setup.s3.amazonaws.com/webdeploy_amd64_en-US.msi"
        dest: "C:\\temp\\WebDeploy_x64.msi"

    - name: Install WebDeploy
      win_package:
        path: 'C:\\temp\\WebDeploy_x64.msi'
        state: present
        arguments: '/quiet'

    - name: Create WebDeploy Admin User with password never expiring
      win_user:
        name: "webdeployadmin"
        password: "{{ lookup('env', 'WEBDEPLOYADMIN_PASSWORD') }}"
        state: present
        password_never_expires: yes

    - name: Add WebDeploy Admin to Administrators Group
      win_group_membership:
        name: Administrators
        members: webdeployadmin
        state: present

    - name: Add WebDeployConfigWriter User with password never expiring
      win_user:
        name: "WDeployConfigWriter"
        password: "{{ lookup('env', 'WEBDEPLOYADMIN_PASSWORD') }}"
        state: present
        password_never_expires: yes

    - name: Add WebDeployConfigWriter to Administrators Group
      win_group_membership:
        name: Administrators
        members: WDeployConfigWriter
        state: present

    - name: Add login.aspx to Default Documents
      win_iis_webapplication:
        name: 'Default Web Site'
        site: 'Default Web Site'
        state: present
        path: /
        application_pool: 'DefaultAppPool'
        default_documents:
          - 'login.aspx'

    - name: Start DefaultAppPool if not running
      win_shell: |
        Import-Module WebAdministration
        $appPool = Get-WebAppPoolState -Name 'DefaultAppPool'
        if ($appPool -ne 'Started') {
          Start-WebAppPool -Name 'DefaultAppPool'
        }

    - name: Ensure Default Web Site is running
      win_shell: |
        Import-Module WebAdministration
        $site = Get-Website -Name 'Default Web Site'
        if ($site.state -ne 'Started') {
          Start-Website -Name 'Default Web Site'
        }

    - name: Stop IIS Management Service before identity change
      win_service:
        name: WMSVC
        state: stopped

    - name: Create a self-signed SSL certificate
      win_shell: |
        New-SelfSignedCertificate -DnsName "office-deployment" -CertStoreLocation "cert:\LocalMachine\My"

    - name: Enable Remote Connections with SSL
      win_shell: |
      $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.DnsName -eq 'office-deployment' }
      if ($cert) {
        Write-Host "Certificate found: $($cert.Thumbprint)"
        Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/management" -name "enableRemoteManagement" -value $true
        Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.applicationHost/management" -name "SslCertificateHash" -value $cert.Thumbprint
      } else {
        Write-Host "Certificate not found!"
        exit 1
      }
      register: remote_enable_result
      retries: 3
      delay: 5
      until: remote_enable_result.rc == 0

    - name: Start IIS Management Service after identity change
      win_service:
        name: WMSVC
        state: started
