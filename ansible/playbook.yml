---
- name: Configure Windows EC2 Instances in Elastic Beanstalk
  hosts: windows
  tasks:
    - name: Ensure C:\temp directory exists
      win_file:
        path: 'C:\temp'
        state: directory

    - name: Download WebDeploy Installer
      win_get_url:
        url: "https://my-s3-bucket-for-jenkins-pipeline-setup.s3.amazonaws.com/webdeploy_amd64_en-US.msi"
        dest: "C:\\temp\\WebDeploy_x64.msi"

    - name: Install WebDeploy
      win_package:
        path: 'C:\\temp\\WebDeploy_x64.msi'
        state: present
        arguments: '/quiet'

    - name: Create WebDeploy Admin User
      win_user:
        name: "webdeployadmin"
        password: "{{ lookup('env', 'WEBDEPLOYADMIN_PASSWORD') }}"
        state: present

    - name: Add WebDeploy Admin to Administrators Group
      win_group_membership:
        name: Administrators
        members: webdeployadmin
        state: present

    - name: Restart Web Management Service (WMSVC)
      win_service:
        name: WMSVC
        state: restarted

    - name: Ensure login.aspx is added to Default Documents
      win_shell: |
        Import-Module WebAdministration
        $site = Get-Website -Name 'Default Web Site'
        if ($site) {
          $defaultDocs = Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/defaultDocument/files" -name "value" -location 'Default Web Site'
          if ($defaultDocs -notcontains 'login.aspx') {
            Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter "system.webServer/defaultDocument/files" -name "." -value @{value='login.aspx'} -location 'Default Web Site'
            Write-Host "Added login.aspx to default documents."
          } else {
          Write-Host "login.aspx already exists in the default documents."
          }
        }

    - name: Ensure Default Web Site is running
      win_iis_website:
        name: Default Web Site
        state: started

    - name: Ensure IIS AppPool 'DefaultAppPool' is started or restarted
      win_shell: |
        Import-Module WebAdministration
        $appPool = Get-WebAppPoolState -Name 'DefaultAppPool'
        if ($appPool -eq 'Stopped') {
          Start-WebAppPool -Name 'DefaultAppPool'
          Write-Host "Started the Application Pool."
        } elseif ($appPool -eq 'Started') {
          Restart-WebAppPool -Name 'DefaultAppPool'
          Write-Host "Restarted the Application Pool."
        }

    - name: Clean up installer
      win_file:
        path: 'C:\\temp\\WebDeploy_x64.msi'
        state: absent

    - name: Restart IIS to apply changes
      win_service:
        name: W3SVC
        state: restarted

    - name: Create a Self-Signed Certificate
      win_shell: |
        New-SelfSignedCertificate -DnsName 'http://poc-jenkins-env.eba-ad3eyghs.us-east-1.elasticbeanstalk.com/' -CertStoreLocation Cert:\LocalMachine\My

    - name: Bind SSL Certificate to Default Web Site
      win_shell: |
      Import-Module WebAdministration
      $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.DnsName -eq 'http://poc-jenkins-env.eba-ad3eyghs.us-east-1.elasticbeanstalk.com/' }
      if ($cert) {
        # Use the correct format for binding information (IP:Port:Hostname)
        New-WebBinding -Name 'Default Web Site' -Protocol https -Port 443 -IPAddress '*' -HostHeader 'http://poc-jenkins-env.eba-ad3eyghs.us-east-1.elasticbeanstalk.com/' -SslFlags 1
        Set-ItemProperty -Path 'IIS:\SslBindings\0.0.0.0!443' -Name SslCertificateStoreName -Value 'My'
        Set-ItemProperty -Path 'IIS:\SslBindings\0.0.0.0!443' -Name SslCertificateHash -Value $cert.Thumbprint
      } else {
        Write-Host "SSL certificate not found for 'http://poc-jenkins-env.eba-ad3eyghs.us-east-1.elasticbeanstalk.com/'."
      }

    - name: Set IIS Authentication to Windows Authentication
      win_shell: |
        Import-Module WebAdministration
        Set-WebConfigurationProperty -Filter "/system.webServer/security/authentication/windowsAuthentication" -Name "enabled" -Value "True" -PSPath "IIS:\Sites\Default Web Site"
